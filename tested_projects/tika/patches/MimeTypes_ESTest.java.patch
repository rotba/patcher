diff --git a/src/test/java/org/apache/tika/mime/MimeTypes_ESTest.java b/src/test/java/org/apache/tika/mime/MimeTypes_ESTest.java
new file mode 100644
index 000000000..8691528b3
--- /dev/null
+++ b/src/test/java/org/apache/tika/mime/MimeTypes_ESTest.java
@@ -0,0 +1,1356 @@
+/*
+ * This file was automatically generated by EvoSuite
+ * Tue Oct 22 14:31:46 GMT 2019
+ */
+
+package org.apache.tika.mime;
+
+import org.junit.Test;
+import static org.junit.Assert.*;
+import static org.evosuite.runtime.EvoAssertions.*;
+import java.io.File;
+import java.net.URL;
+import java.util.regex.PatternSyntaxException;
+import org.apache.commons.logging.impl.Jdk14Logger;
+import org.apache.commons.logging.impl.Log4JCategoryLog;
+import org.apache.commons.logging.impl.Log4JLogger;
+import org.apache.commons.logging.impl.NoOpLog;
+import org.apache.commons.logging.impl.SimpleLog;
+import org.apache.tika.mime.Clause;
+import org.apache.tika.mime.Magic;
+import org.apache.tika.mime.MimeType;
+import org.apache.tika.mime.MimeTypes;
+import org.dom4j.Namespace;
+import org.dom4j.dom.DOMDocument;
+import org.dom4j.dom.DOMElement;
+import org.evosuite.runtime.EvoRunner;
+import org.evosuite.runtime.EvoRunnerParameters;
+import org.junit.runner.RunWith;
+import org.w3c.dom.Document;
+
+@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
+public class MimeTypes_ESTest extends MimeTypes_ESTest_scaffolding {
+
+  @Test(timeout = 4000)
+  public void test00()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("org.dom4j.datatype.DatatypeElement");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      MimeType mimeType0 = mimeTypes0.forName("");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNull(mimeType0);
+  }
+
+  @Test(timeout = 4000)
+  public void test01()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("jd1S`gt_8wvCUj@^A");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType((URL) null);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test02()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("Ulu KU)f7Vy");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      assertFalse(mimeType0.hasMagic());
+      assertNull(mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertNotNull(mimeType0);
+      
+      mimeType0.addPattern("0n[MA@E*(");
+      assertFalse(mimeType0.hasMagic());
+      assertNull(mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      
+      mimeTypes0.add(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertNull(mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      
+      byte[] byteArray0 = new byte[7];
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType("application/octet-stream", byteArray0);
+        fail("Expecting exception: PatternSyntaxException");
+      
+      } catch(PatternSyntaxException e) {
+         //
+         // Unclosed character class near index 8\r
+         // 0n[MA@E*(\r
+         //         ^
+         //
+         verifyException("java.util.regex.Pattern", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test03()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("org.dom4j.datatype.DatatypeElement");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      byte[] byteArray0 = new byte[2];
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType((String) null, byteArray0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test04()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("<;");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType((String) null);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test05()  throws Throwable  {
+      DOMElement dOMElement0 = new DOMElement("Dnq:!2", (Namespace) null);
+      assertFalse(dOMElement0.isReadOnly());
+      assertTrue(dOMElement0.supportsParent());
+      assertEquals("", dOMElement0.getPrefix());
+      assertEquals("Element", dOMElement0.getNodeTypeName());
+      assertEquals((short)1, dOMElement0.getNodeType());
+      assertEquals("Dnq:!2", dOMElement0.getLocalName());
+      assertNull(dOMElement0.getNodeValue());
+      assertEquals(0, dOMElement0.nodeCount());
+      assertFalse(dOMElement0.hasChildNodes());
+      assertEquals("", dOMElement0.getNamespaceURI());
+      assertEquals(0, dOMElement0.attributeCount());
+      assertNotNull(dOMElement0);
+      
+      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
+      assertFalse(dOMElement0.isReadOnly());
+      assertTrue(dOMElement0.supportsParent());
+      assertEquals("", dOMElement0.getPrefix());
+      assertEquals("Element", dOMElement0.getNodeTypeName());
+      assertEquals((short)1, dOMElement0.getNodeType());
+      assertEquals("Dnq:!2", dOMElement0.getLocalName());
+      assertNull(dOMElement0.getNodeValue());
+      assertEquals(0, dOMElement0.nodeCount());
+      assertFalse(dOMElement0.hasChildNodes());
+      assertEquals("", dOMElement0.getNamespaceURI());
+      assertEquals(0, dOMElement0.attributeCount());
+      assertEquals("Document", dOMDocument0.getNodeTypeName());
+      assertNull(dOMDocument0.getName());
+      assertEquals("#document", dOMDocument0.getNodeName());
+      assertNull(dOMDocument0.getXMLEncoding());
+      assertFalse(dOMDocument0.supportsParent());
+      assertFalse(dOMDocument0.isReadOnly());
+      assertNull(dOMDocument0.getNodeValue());
+      assertEquals((short)9, dOMDocument0.getNodeType());
+      assertNotNull(dOMDocument0);
+      
+      NoOpLog noOpLog0 = new NoOpLog("Dnq:!2");
+      assertFalse(noOpLog0.isWarnEnabled());
+      assertFalse(noOpLog0.isDebugEnabled());
+      assertFalse(noOpLog0.isTraceEnabled());
+      assertFalse(noOpLog0.isInfoEnabled());
+      assertFalse(noOpLog0.isFatalEnabled());
+      assertFalse(noOpLog0.isErrorEnabled());
+      assertNotNull(noOpLog0);
+      
+      MimeTypes mimeTypes0 = new MimeTypes(dOMDocument0, noOpLog0);
+      assertFalse(dOMElement0.isReadOnly());
+      assertTrue(dOMElement0.supportsParent());
+      assertEquals("", dOMElement0.getPrefix());
+      assertEquals("Element", dOMElement0.getNodeTypeName());
+      assertEquals((short)1, dOMElement0.getNodeType());
+      assertEquals("Dnq:!2", dOMElement0.getLocalName());
+      assertNull(dOMElement0.getNodeValue());
+      assertEquals(0, dOMElement0.nodeCount());
+      assertFalse(dOMElement0.hasChildNodes());
+      assertEquals("", dOMElement0.getNamespaceURI());
+      assertEquals(0, dOMElement0.attributeCount());
+      assertEquals("Document", dOMDocument0.getNodeTypeName());
+      assertNull(dOMDocument0.getName());
+      assertEquals("#document", dOMDocument0.getNodeName());
+      assertNull(dOMDocument0.getXMLEncoding());
+      assertFalse(dOMDocument0.supportsParent());
+      assertFalse(dOMDocument0.isReadOnly());
+      assertNull(dOMDocument0.getNodeValue());
+      assertEquals((short)9, dOMDocument0.getNodeType());
+      assertFalse(noOpLog0.isWarnEnabled());
+      assertFalse(noOpLog0.isDebugEnabled());
+      assertFalse(noOpLog0.isTraceEnabled());
+      assertFalse(noOpLog0.isInfoEnabled());
+      assertFalse(noOpLog0.isFatalEnabled());
+      assertFalse(noOpLog0.isErrorEnabled());
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType((File) null);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test06()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("nC<.'EJI");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertNull(mimeType0.getDescription());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertFalse(mimeType0.hasMagic());
+      assertNotNull(mimeType0);
+      
+      Magic magic0 = new Magic(5);
+      assertNotNull(magic0);
+      
+      mimeType0.addMagic(magic0);
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertTrue(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertNull(mimeType0.getDescription());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      
+      MimeType[] mimeTypeArray0 = new MimeType[9];
+      mimeTypeArray0[0] = mimeType0;
+      mimeTypeArray0[1] = mimeType0;
+      // Undeclared exception!
+      try { 
+        mimeTypes0.add(mimeTypeArray0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.Magic", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test07()  throws Throwable  {
+      NoOpLog noOpLog0 = new NoOpLog();
+      assertFalse(noOpLog0.isFatalEnabled());
+      assertFalse(noOpLog0.isErrorEnabled());
+      assertFalse(noOpLog0.isWarnEnabled());
+      assertFalse(noOpLog0.isDebugEnabled());
+      assertFalse(noOpLog0.isTraceEnabled());
+      assertFalse(noOpLog0.isInfoEnabled());
+      assertNotNull(noOpLog0);
+      
+      MimeTypes mimeTypes0 = null;
+      try {
+        mimeTypes0 = new MimeTypes((Document) null, noOpLog0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.MimeTypesReader", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test08()  throws Throwable  {
+      MimeTypes mimeTypes0 = null;
+      try {
+        mimeTypes0 = new MimeTypes((Document) null);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.MimeTypesReader", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test09()  throws Throwable  {
+      Log4JLogger log4JLogger0 = new Log4JLogger("org.apache.tika.mime.MimeTypes");
+      assertNotNull(log4JLogger0);
+      
+      MimeTypes mimeTypes0 = null;
+      try {
+        mimeTypes0 = new MimeTypes((String) null, log4JLogger0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test10()  throws Throwable  {
+      Log4JCategoryLog log4JCategoryLog0 = new Log4JCategoryLog("");
+      assertNotNull(log4JCategoryLog0);
+      
+      MimeTypes mimeTypes0 = null;
+      try {
+        mimeTypes0 = new MimeTypes("org.apache.commons.logging.simplelog.dateTimeFormat", log4JCategoryLog0);
+        fail("Expecting exception: NoSuchMethodError");
+      
+      } catch(NoSuchMethodError e) {
+         //
+         // org.apache.log4j.Category.isEnabledFor(Lorg/apache/log4j/Level;)Z
+         //
+         verifyException("org.apache.commons.logging.impl.Log4JCategoryLog", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test11()  throws Throwable  {
+      Jdk14Logger jdk14Logger0 = new Jdk14Logger("1[VcI) o@Je)aL_2");
+      assertNotNull(jdk14Logger0);
+      
+      MimeTypes mimeTypes0 = null;
+      try {
+        mimeTypes0 = new MimeTypes("", jdk14Logger0);
+        fail("Expecting exception: NoClassDefFoundError");
+      
+      } catch(NoClassDefFoundError e) {
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test12()  throws Throwable  {
+      MimeTypes mimeTypes0 = null;
+      try {
+        mimeTypes0 = new MimeTypes((String) null);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test13()  throws Throwable  {
+      MimeTypes mimeTypes0 = null;
+      try {
+        mimeTypes0 = new MimeTypes("");
+        fail("Expecting exception: NoClassDefFoundError");
+      
+      } catch(NoClassDefFoundError e) {
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test14()  throws Throwable  {
+      SimpleLog simpleLog0 = new SimpleLog("");
+      assertFalse(simpleLog0.isDebugEnabled());
+      assertTrue(simpleLog0.isFatalEnabled());
+      assertEquals(3, simpleLog0.getLevel());
+      assertTrue(simpleLog0.isInfoEnabled());
+      assertTrue(simpleLog0.isErrorEnabled());
+      assertFalse(simpleLog0.isTraceEnabled());
+      assertTrue(simpleLog0.isWarnEnabled());
+      assertNotNull(simpleLog0);
+      assertEquals(3, SimpleLog.LOG_LEVEL_INFO);
+      assertEquals(4, SimpleLog.LOG_LEVEL_WARN);
+      assertEquals(0, SimpleLog.LOG_LEVEL_ALL);
+      assertEquals(1, SimpleLog.LOG_LEVEL_TRACE);
+      assertEquals(6, SimpleLog.LOG_LEVEL_FATAL);
+      assertEquals(2, SimpleLog.LOG_LEVEL_DEBUG);
+      assertEquals(5, SimpleLog.LOG_LEVEL_ERROR);
+      assertEquals(7, SimpleLog.LOG_LEVEL_OFF);
+      
+      MimeTypes mimeTypes0 = new MimeTypes("nC<.'EJI", simpleLog0);
+      assertFalse(simpleLog0.isDebugEnabled());
+      assertTrue(simpleLog0.isFatalEnabled());
+      assertEquals(3, simpleLog0.getLevel());
+      assertTrue(simpleLog0.isInfoEnabled());
+      assertTrue(simpleLog0.isErrorEnabled());
+      assertFalse(simpleLog0.isTraceEnabled());
+      assertTrue(simpleLog0.isWarnEnabled());
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      assertEquals(3, SimpleLog.LOG_LEVEL_INFO);
+      assertEquals(4, SimpleLog.LOG_LEVEL_WARN);
+      assertEquals(0, SimpleLog.LOG_LEVEL_ALL);
+      assertEquals(1, SimpleLog.LOG_LEVEL_TRACE);
+      assertEquals(6, SimpleLog.LOG_LEVEL_FATAL);
+      assertEquals(2, SimpleLog.LOG_LEVEL_DEBUG);
+      assertEquals(5, SimpleLog.LOG_LEVEL_ERROR);
+      assertEquals(7, SimpleLog.LOG_LEVEL_OFF);
+      
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertNull(mimeType0.getDescription());
+      assertNotNull(mimeType0);
+      
+      mimeTypes0.add(mimeType0);
+      assertFalse(simpleLog0.isDebugEnabled());
+      assertTrue(simpleLog0.isFatalEnabled());
+      assertEquals(3, simpleLog0.getLevel());
+      assertTrue(simpleLog0.isInfoEnabled());
+      assertTrue(simpleLog0.isErrorEnabled());
+      assertFalse(simpleLog0.isTraceEnabled());
+      assertTrue(simpleLog0.isWarnEnabled());
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertNull(mimeType0.getDescription());
+      assertEquals(3, SimpleLog.LOG_LEVEL_INFO);
+      assertEquals(4, SimpleLog.LOG_LEVEL_WARN);
+      assertEquals(0, SimpleLog.LOG_LEVEL_ALL);
+      assertEquals(1, SimpleLog.LOG_LEVEL_TRACE);
+      assertEquals(6, SimpleLog.LOG_LEVEL_FATAL);
+      assertEquals(2, SimpleLog.LOG_LEVEL_DEBUG);
+      assertEquals(5, SimpleLog.LOG_LEVEL_ERROR);
+      assertEquals(7, SimpleLog.LOG_LEVEL_OFF);
+      
+      String string0 = mimeTypes0.toString();
+      assertFalse(simpleLog0.isDebugEnabled());
+      assertTrue(simpleLog0.isFatalEnabled());
+      assertEquals(3, simpleLog0.getLevel());
+      assertTrue(simpleLog0.isInfoEnabled());
+      assertTrue(simpleLog0.isErrorEnabled());
+      assertFalse(simpleLog0.isTraceEnabled());
+      assertTrue(simpleLog0.isWarnEnabled());
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream -- null\nAliases:  NONE\nPatterns: NONE\nMagics:   NONE\n\n", string0);
+      assertNotNull(string0);
+      assertEquals(3, SimpleLog.LOG_LEVEL_INFO);
+      assertEquals(4, SimpleLog.LOG_LEVEL_WARN);
+      assertEquals(0, SimpleLog.LOG_LEVEL_ALL);
+      assertEquals(1, SimpleLog.LOG_LEVEL_TRACE);
+      assertEquals(6, SimpleLog.LOG_LEVEL_FATAL);
+      assertEquals(2, SimpleLog.LOG_LEVEL_DEBUG);
+      assertEquals(5, SimpleLog.LOG_LEVEL_ERROR);
+      assertEquals(7, SimpleLog.LOG_LEVEL_OFF);
+  }
+
+  @Test(timeout = 4000)
+  public void test15()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("cak2S");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertNull(mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertNotNull(mimeType0);
+      
+      mimeType0.addSuperType("-indentSize");
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertNull(mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      
+      mimeTypes0.add(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertNull(mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      
+      mimeTypes0.add(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertNull(mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("octet-stream", mimeType0.getSubType());
+  }
+
+  @Test(timeout = 4000)
+  public void test16()  throws Throwable  {
+      SimpleLog simpleLog0 = new SimpleLog("cak2S");
+      assertFalse(simpleLog0.isTraceEnabled());
+      assertTrue(simpleLog0.isErrorEnabled());
+      assertTrue(simpleLog0.isWarnEnabled());
+      assertTrue(simpleLog0.isInfoEnabled());
+      assertFalse(simpleLog0.isDebugEnabled());
+      assertTrue(simpleLog0.isFatalEnabled());
+      assertEquals(3, simpleLog0.getLevel());
+      assertNotNull(simpleLog0);
+      assertEquals(2, SimpleLog.LOG_LEVEL_DEBUG);
+      assertEquals(7, SimpleLog.LOG_LEVEL_OFF);
+      assertEquals(6, SimpleLog.LOG_LEVEL_FATAL);
+      assertEquals(0, SimpleLog.LOG_LEVEL_ALL);
+      assertEquals(3, SimpleLog.LOG_LEVEL_INFO);
+      assertEquals(4, SimpleLog.LOG_LEVEL_WARN);
+      assertEquals(1, SimpleLog.LOG_LEVEL_TRACE);
+      assertEquals(5, SimpleLog.LOG_LEVEL_ERROR);
+      
+      MimeTypes mimeTypes0 = new MimeTypes("nC<.'EJI", simpleLog0);
+      assertFalse(simpleLog0.isTraceEnabled());
+      assertTrue(simpleLog0.isErrorEnabled());
+      assertTrue(simpleLog0.isWarnEnabled());
+      assertTrue(simpleLog0.isInfoEnabled());
+      assertFalse(simpleLog0.isDebugEnabled());
+      assertTrue(simpleLog0.isFatalEnabled());
+      assertEquals(3, simpleLog0.getLevel());
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      assertEquals(2, SimpleLog.LOG_LEVEL_DEBUG);
+      assertEquals(7, SimpleLog.LOG_LEVEL_OFF);
+      assertEquals(6, SimpleLog.LOG_LEVEL_FATAL);
+      assertEquals(0, SimpleLog.LOG_LEVEL_ALL);
+      assertEquals(3, SimpleLog.LOG_LEVEL_INFO);
+      assertEquals(4, SimpleLog.LOG_LEVEL_WARN);
+      assertEquals(1, SimpleLog.LOG_LEVEL_TRACE);
+      assertEquals(5, SimpleLog.LOG_LEVEL_ERROR);
+      
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      assertNull(mimeType0.getDescription());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertNotNull(mimeType0);
+      
+      mimeType0.addSuperType("application/octet-stream");
+      assertNull(mimeType0.getDescription());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      
+      mimeTypes0.add(mimeType0);
+      assertFalse(simpleLog0.isTraceEnabled());
+      assertTrue(simpleLog0.isErrorEnabled());
+      assertTrue(simpleLog0.isWarnEnabled());
+      assertTrue(simpleLog0.isInfoEnabled());
+      assertFalse(simpleLog0.isDebugEnabled());
+      assertTrue(simpleLog0.isFatalEnabled());
+      assertEquals(3, simpleLog0.getLevel());
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNull(mimeType0.getDescription());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals(2, SimpleLog.LOG_LEVEL_DEBUG);
+      assertEquals(7, SimpleLog.LOG_LEVEL_OFF);
+      assertEquals(6, SimpleLog.LOG_LEVEL_FATAL);
+      assertEquals(0, SimpleLog.LOG_LEVEL_ALL);
+      assertEquals(3, SimpleLog.LOG_LEVEL_INFO);
+      assertEquals(4, SimpleLog.LOG_LEVEL_WARN);
+      assertEquals(1, SimpleLog.LOG_LEVEL_TRACE);
+      assertEquals(5, SimpleLog.LOG_LEVEL_ERROR);
+  }
+
+  @Test(timeout = 4000)
+  public void test17()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("org.dom4j.datatype.DatatypeElement");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      MimeType[] mimeTypeArray0 = new MimeType[8];
+      mimeTypes0.add(mimeTypeArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals(8, mimeTypeArray0.length);
+  }
+
+  @Test(timeout = 4000)
+  public void test18()  throws Throwable  {
+      DOMDocument dOMDocument0 = new DOMDocument((DOMElement) null);
+      assertNull(dOMDocument0.getName());
+      assertFalse(dOMDocument0.supportsParent());
+      assertEquals("#document", dOMDocument0.getNodeName());
+      assertNull(dOMDocument0.getXMLEncoding());
+      assertEquals("Document", dOMDocument0.getNodeTypeName());
+      assertFalse(dOMDocument0.isReadOnly());
+      assertNull(dOMDocument0.getNodeValue());
+      assertEquals((short)9, dOMDocument0.getNodeType());
+      assertNotNull(dOMDocument0);
+      
+      MimeTypes mimeTypes0 = new MimeTypes(dOMDocument0);
+      assertNull(dOMDocument0.getName());
+      assertFalse(dOMDocument0.supportsParent());
+      assertEquals("#document", dOMDocument0.getNodeName());
+      assertNull(dOMDocument0.getXMLEncoding());
+      assertEquals("Document", dOMDocument0.getNodeTypeName());
+      assertFalse(dOMDocument0.isReadOnly());
+      assertNull(dOMDocument0.getNodeValue());
+      assertEquals((short)9, dOMDocument0.getNodeType());
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      mimeTypes0.add((MimeType[]) null);
+      assertNull(dOMDocument0.getName());
+      assertFalse(dOMDocument0.supportsParent());
+      assertEquals("#document", dOMDocument0.getNodeName());
+      assertNull(dOMDocument0.getXMLEncoding());
+      assertEquals("Document", dOMDocument0.getNodeTypeName());
+      assertFalse(dOMDocument0.isReadOnly());
+      assertNull(dOMDocument0.getNodeValue());
+      assertEquals((short)9, dOMDocument0.getNodeType());
+      assertEquals(1024, mimeTypes0.getMinLength());
+  }
+
+  @Test(timeout = 4000)
+  public void test19()  throws Throwable  {
+      SimpleLog simpleLog0 = new SimpleLog("cak2S");
+      assertEquals(3, simpleLog0.getLevel());
+      assertTrue(simpleLog0.isErrorEnabled());
+      assertFalse(simpleLog0.isTraceEnabled());
+      assertTrue(simpleLog0.isWarnEnabled());
+      assertFalse(simpleLog0.isDebugEnabled());
+      assertTrue(simpleLog0.isFatalEnabled());
+      assertTrue(simpleLog0.isInfoEnabled());
+      assertNotNull(simpleLog0);
+      assertEquals(1, SimpleLog.LOG_LEVEL_TRACE);
+      assertEquals(3, SimpleLog.LOG_LEVEL_INFO);
+      assertEquals(5, SimpleLog.LOG_LEVEL_ERROR);
+      assertEquals(7, SimpleLog.LOG_LEVEL_OFF);
+      assertEquals(6, SimpleLog.LOG_LEVEL_FATAL);
+      assertEquals(2, SimpleLog.LOG_LEVEL_DEBUG);
+      assertEquals(0, SimpleLog.LOG_LEVEL_ALL);
+      assertEquals(4, SimpleLog.LOG_LEVEL_WARN);
+      
+      MimeTypes mimeTypes0 = new MimeTypes("nC<.'EJI", simpleLog0);
+      assertEquals(3, simpleLog0.getLevel());
+      assertTrue(simpleLog0.isErrorEnabled());
+      assertFalse(simpleLog0.isTraceEnabled());
+      assertTrue(simpleLog0.isWarnEnabled());
+      assertFalse(simpleLog0.isDebugEnabled());
+      assertTrue(simpleLog0.isFatalEnabled());
+      assertTrue(simpleLog0.isInfoEnabled());
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      assertEquals(1, SimpleLog.LOG_LEVEL_TRACE);
+      assertEquals(3, SimpleLog.LOG_LEVEL_INFO);
+      assertEquals(5, SimpleLog.LOG_LEVEL_ERROR);
+      assertEquals(7, SimpleLog.LOG_LEVEL_OFF);
+      assertEquals(6, SimpleLog.LOG_LEVEL_FATAL);
+      assertEquals(2, SimpleLog.LOG_LEVEL_DEBUG);
+      assertEquals(0, SimpleLog.LOG_LEVEL_ALL);
+      assertEquals(4, SimpleLog.LOG_LEVEL_WARN);
+      
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertNull(mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertNotNull(mimeType0);
+      
+      Magic magic0 = new Magic(2608);
+      assertNotNull(magic0);
+      
+      Clause.True clause_True0 = (Clause.True)Clause.TRUE;
+      assertEquals(0, clause_True0.size());
+      assertEquals("TRUE", clause_True0.toString());
+      assertNotNull(clause_True0);
+      
+      magic0.setType(mimeType0);
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertNull(mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application", mimeType0.getPrimaryType());
+      
+      magic0.setClause(clause_True0);
+      assertEquals(0, magic0.size());
+      assertEquals(0, clause_True0.size());
+      assertEquals("TRUE", clause_True0.toString());
+      
+      mimeType0.addMagic(magic0);
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertNull(mimeType0.getDescription());
+      assertTrue(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertEquals(0, magic0.size());
+      
+      mimeTypes0.add(mimeType0);
+      assertEquals(3, simpleLog0.getLevel());
+      assertTrue(simpleLog0.isErrorEnabled());
+      assertFalse(simpleLog0.isTraceEnabled());
+      assertTrue(simpleLog0.isWarnEnabled());
+      assertFalse(simpleLog0.isDebugEnabled());
+      assertTrue(simpleLog0.isFatalEnabled());
+      assertTrue(simpleLog0.isInfoEnabled());
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertNull(mimeType0.getDescription());
+      assertTrue(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertEquals(1, SimpleLog.LOG_LEVEL_TRACE);
+      assertEquals(3, SimpleLog.LOG_LEVEL_INFO);
+      assertEquals(5, SimpleLog.LOG_LEVEL_ERROR);
+      assertEquals(7, SimpleLog.LOG_LEVEL_OFF);
+      assertEquals(6, SimpleLog.LOG_LEVEL_FATAL);
+      assertEquals(2, SimpleLog.LOG_LEVEL_DEBUG);
+      assertEquals(0, SimpleLog.LOG_LEVEL_ALL);
+      assertEquals(4, SimpleLog.LOG_LEVEL_WARN);
+      
+      byte[] byteArray0 = new byte[8];
+      MimeType mimeType1 = mimeTypes0.getMimeType("nC<.'EJI", byteArray0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(3, simpleLog0.getLevel());
+      assertTrue(simpleLog0.isErrorEnabled());
+      assertFalse(simpleLog0.isTraceEnabled());
+      assertTrue(simpleLog0.isWarnEnabled());
+      assertFalse(simpleLog0.isDebugEnabled());
+      assertTrue(simpleLog0.isFatalEnabled());
+      assertTrue(simpleLog0.isInfoEnabled());
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertTrue(mimeType1.hasMagic());
+      assertEquals("octet-stream", mimeType1.getSubType());
+      assertNull(mimeType1.getDescription());
+      assertEquals("application", mimeType1.getPrimaryType());
+      assertEquals("application/octet-stream", mimeType1.getName());
+      assertNotNull(mimeType1);
+      assertEquals(8, byteArray0.length);
+      assertSame(mimeType1, mimeType0);
+      assertEquals(1, SimpleLog.LOG_LEVEL_TRACE);
+      assertEquals(3, SimpleLog.LOG_LEVEL_INFO);
+      assertEquals(5, SimpleLog.LOG_LEVEL_ERROR);
+      assertEquals(7, SimpleLog.LOG_LEVEL_OFF);
+      assertEquals(6, SimpleLog.LOG_LEVEL_FATAL);
+      assertEquals(2, SimpleLog.LOG_LEVEL_DEBUG);
+      assertEquals(0, SimpleLog.LOG_LEVEL_ALL);
+      assertEquals(4, SimpleLog.LOG_LEVEL_WARN);
+  }
+
+  @Test(timeout = 4000)
+  public void test20()  throws Throwable  {
+      SimpleLog simpleLog0 = new SimpleLog("cak2S");
+      assertTrue(simpleLog0.isErrorEnabled());
+      assertFalse(simpleLog0.isTraceEnabled());
+      assertTrue(simpleLog0.isWarnEnabled());
+      assertEquals(3, simpleLog0.getLevel());
+      assertFalse(simpleLog0.isDebugEnabled());
+      assertTrue(simpleLog0.isFatalEnabled());
+      assertTrue(simpleLog0.isInfoEnabled());
+      assertNotNull(simpleLog0);
+      assertEquals(2, SimpleLog.LOG_LEVEL_DEBUG);
+      assertEquals(7, SimpleLog.LOG_LEVEL_OFF);
+      assertEquals(6, SimpleLog.LOG_LEVEL_FATAL);
+      assertEquals(5, SimpleLog.LOG_LEVEL_ERROR);
+      assertEquals(3, SimpleLog.LOG_LEVEL_INFO);
+      assertEquals(1, SimpleLog.LOG_LEVEL_TRACE);
+      assertEquals(4, SimpleLog.LOG_LEVEL_WARN);
+      assertEquals(0, SimpleLog.LOG_LEVEL_ALL);
+      
+      MimeTypes mimeTypes0 = new MimeTypes("nC<.'EJI", simpleLog0);
+      assertTrue(simpleLog0.isErrorEnabled());
+      assertFalse(simpleLog0.isTraceEnabled());
+      assertTrue(simpleLog0.isWarnEnabled());
+      assertEquals(3, simpleLog0.getLevel());
+      assertFalse(simpleLog0.isDebugEnabled());
+      assertTrue(simpleLog0.isFatalEnabled());
+      assertTrue(simpleLog0.isInfoEnabled());
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      assertEquals(2, SimpleLog.LOG_LEVEL_DEBUG);
+      assertEquals(7, SimpleLog.LOG_LEVEL_OFF);
+      assertEquals(6, SimpleLog.LOG_LEVEL_FATAL);
+      assertEquals(5, SimpleLog.LOG_LEVEL_ERROR);
+      assertEquals(3, SimpleLog.LOG_LEVEL_INFO);
+      assertEquals(1, SimpleLog.LOG_LEVEL_TRACE);
+      assertEquals(4, SimpleLog.LOG_LEVEL_WARN);
+      assertEquals(0, SimpleLog.LOG_LEVEL_ALL);
+      
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertNull(mimeType0.getDescription());
+      assertNotNull(mimeType0);
+      
+      Magic magic0 = new Magic(2608);
+      assertNotNull(magic0);
+      
+      Clause.True clause_True0 = (Clause.True)Clause.TRUE;
+      assertEquals("TRUE", clause_True0.toString());
+      assertEquals(0, clause_True0.size());
+      assertNotNull(clause_True0);
+      
+      magic0.setClause(clause_True0);
+      assertEquals(0, magic0.size());
+      assertEquals("TRUE", clause_True0.toString());
+      assertEquals(0, clause_True0.size());
+      
+      mimeType0.addMagic(magic0);
+      assertTrue(mimeType0.hasMagic());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertNull(mimeType0.getDescription());
+      assertEquals(0, magic0.size());
+      
+      mimeTypes0.add(mimeType0);
+      assertTrue(simpleLog0.isErrorEnabled());
+      assertFalse(simpleLog0.isTraceEnabled());
+      assertTrue(simpleLog0.isWarnEnabled());
+      assertEquals(3, simpleLog0.getLevel());
+      assertFalse(simpleLog0.isDebugEnabled());
+      assertTrue(simpleLog0.isFatalEnabled());
+      assertTrue(simpleLog0.isInfoEnabled());
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertTrue(mimeType0.hasMagic());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertNull(mimeType0.getDescription());
+      assertEquals(2, SimpleLog.LOG_LEVEL_DEBUG);
+      assertEquals(7, SimpleLog.LOG_LEVEL_OFF);
+      assertEquals(6, SimpleLog.LOG_LEVEL_FATAL);
+      assertEquals(5, SimpleLog.LOG_LEVEL_ERROR);
+      assertEquals(3, SimpleLog.LOG_LEVEL_INFO);
+      assertEquals(1, SimpleLog.LOG_LEVEL_TRACE);
+      assertEquals(4, SimpleLog.LOG_LEVEL_WARN);
+      assertEquals(0, SimpleLog.LOG_LEVEL_ALL);
+      
+      byte[] byteArray0 = new byte[8];
+      MimeType mimeType1 = mimeTypes0.getMimeType(byteArray0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertTrue(simpleLog0.isErrorEnabled());
+      assertFalse(simpleLog0.isTraceEnabled());
+      assertTrue(simpleLog0.isWarnEnabled());
+      assertEquals(3, simpleLog0.getLevel());
+      assertFalse(simpleLog0.isDebugEnabled());
+      assertTrue(simpleLog0.isFatalEnabled());
+      assertTrue(simpleLog0.isInfoEnabled());
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNull(mimeType1);
+      assertEquals(8, byteArray0.length);
+      assertEquals(2, SimpleLog.LOG_LEVEL_DEBUG);
+      assertEquals(7, SimpleLog.LOG_LEVEL_OFF);
+      assertEquals(6, SimpleLog.LOG_LEVEL_FATAL);
+      assertEquals(5, SimpleLog.LOG_LEVEL_ERROR);
+      assertEquals(3, SimpleLog.LOG_LEVEL_INFO);
+      assertEquals(1, SimpleLog.LOG_LEVEL_TRACE);
+      assertEquals(4, SimpleLog.LOG_LEVEL_WARN);
+      assertEquals(0, SimpleLog.LOG_LEVEL_ALL);
+  }
+
+  @Test(timeout = 4000)
+  public void test21()  throws Throwable  {
+      SimpleLog simpleLog0 = new SimpleLog("cak2S");
+      assertTrue(simpleLog0.isInfoEnabled());
+      assertTrue(simpleLog0.isWarnEnabled());
+      assertFalse(simpleLog0.isDebugEnabled());
+      assertEquals(3, simpleLog0.getLevel());
+      assertTrue(simpleLog0.isErrorEnabled());
+      assertTrue(simpleLog0.isFatalEnabled());
+      assertFalse(simpleLog0.isTraceEnabled());
+      assertNotNull(simpleLog0);
+      assertEquals(0, SimpleLog.LOG_LEVEL_ALL);
+      assertEquals(5, SimpleLog.LOG_LEVEL_ERROR);
+      assertEquals(3, SimpleLog.LOG_LEVEL_INFO);
+      assertEquals(1, SimpleLog.LOG_LEVEL_TRACE);
+      assertEquals(6, SimpleLog.LOG_LEVEL_FATAL);
+      assertEquals(4, SimpleLog.LOG_LEVEL_WARN);
+      assertEquals(7, SimpleLog.LOG_LEVEL_OFF);
+      assertEquals(2, SimpleLog.LOG_LEVEL_DEBUG);
+      
+      MimeTypes mimeTypes0 = new MimeTypes("nC<.'EJI", simpleLog0);
+      assertTrue(simpleLog0.isInfoEnabled());
+      assertTrue(simpleLog0.isWarnEnabled());
+      assertFalse(simpleLog0.isDebugEnabled());
+      assertEquals(3, simpleLog0.getLevel());
+      assertTrue(simpleLog0.isErrorEnabled());
+      assertTrue(simpleLog0.isFatalEnabled());
+      assertFalse(simpleLog0.isTraceEnabled());
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      assertEquals(0, SimpleLog.LOG_LEVEL_ALL);
+      assertEquals(5, SimpleLog.LOG_LEVEL_ERROR);
+      assertEquals(3, SimpleLog.LOG_LEVEL_INFO);
+      assertEquals(1, SimpleLog.LOG_LEVEL_TRACE);
+      assertEquals(6, SimpleLog.LOG_LEVEL_FATAL);
+      assertEquals(4, SimpleLog.LOG_LEVEL_WARN);
+      assertEquals(7, SimpleLog.LOG_LEVEL_OFF);
+      assertEquals(2, SimpleLog.LOG_LEVEL_DEBUG);
+      
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertNull(mimeType0.getDescription());
+      assertNotNull(mimeType0);
+      
+      Magic magic0 = new Magic(2608);
+      assertNotNull(magic0);
+      
+      mimeType0.addMagic(magic0);
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertTrue(mimeType0.hasMagic());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertNull(mimeType0.getDescription());
+      
+      mimeTypes0.add(mimeType0);
+      assertTrue(simpleLog0.isInfoEnabled());
+      assertTrue(simpleLog0.isWarnEnabled());
+      assertFalse(simpleLog0.isDebugEnabled());
+      assertEquals(3, simpleLog0.getLevel());
+      assertTrue(simpleLog0.isErrorEnabled());
+      assertTrue(simpleLog0.isFatalEnabled());
+      assertFalse(simpleLog0.isTraceEnabled());
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertTrue(mimeType0.hasMagic());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertNull(mimeType0.getDescription());
+      assertEquals(0, SimpleLog.LOG_LEVEL_ALL);
+      assertEquals(5, SimpleLog.LOG_LEVEL_ERROR);
+      assertEquals(3, SimpleLog.LOG_LEVEL_INFO);
+      assertEquals(1, SimpleLog.LOG_LEVEL_TRACE);
+      assertEquals(6, SimpleLog.LOG_LEVEL_FATAL);
+      assertEquals(4, SimpleLog.LOG_LEVEL_WARN);
+      assertEquals(7, SimpleLog.LOG_LEVEL_OFF);
+      assertEquals(2, SimpleLog.LOG_LEVEL_DEBUG);
+      
+      byte[] byteArray0 = new byte[8];
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType(byteArray0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.Magic", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test22()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("Ulu KU)f7Vy");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertFalse(mimeType0.hasMagic());
+      assertNull(mimeType0.getDescription());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertNotNull(mimeType0);
+      
+      mimeType0.addRootXML("application/octet-stream", "cak2S");
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertFalse(mimeType0.hasMagic());
+      assertNull(mimeType0.getDescription());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      
+      mimeTypes0.add(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertFalse(mimeType0.hasMagic());
+      assertNull(mimeType0.getDescription());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      
+      byte[] byteArray0 = new byte[7];
+      MimeType mimeType1 = mimeTypes0.getMimeType("application/octet-stream", byteArray0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("octet-stream", mimeType1.getSubType());
+      assertNull(mimeType1.getDescription());
+      assertEquals("application/octet-stream", mimeType1.getName());
+      assertEquals("application", mimeType1.getPrimaryType());
+      assertFalse(mimeType1.hasMagic());
+      assertNotNull(mimeType1);
+      assertEquals(7, byteArray0.length);
+      assertSame(mimeType1, mimeType0);
+  }
+
+  @Test(timeout = 4000)
+  public void test23()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("org.dom4j.datatype.DatatypeElement");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      byte[] byteArray0 = new byte[0];
+      MimeType mimeType0 = mimeTypes0.getMimeType(byteArray0);
+      assertArrayEquals(new byte[] {}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNull(mimeType0);
+      assertEquals(0, byteArray0.length);
+  }
+
+  @Test(timeout = 4000)
+  public void test24()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("'RO)B|P`");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType((byte[]) null);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNull(mimeType0);
+  }
+
+  @Test(timeout = 4000)
+  public void test25()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("Ulu KU)f7Vy");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      assertFalse(mimeType0.hasMagic());
+      assertNull(mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertNotNull(mimeType0);
+      
+      mimeType0.addPattern("application/octet-stream");
+      assertFalse(mimeType0.hasMagic());
+      assertNull(mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      
+      mimeTypes0.add(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertNull(mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      
+      byte[] byteArray0 = new byte[7];
+      MimeType mimeType1 = mimeTypes0.getMimeType("application/octet-stream", byteArray0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNull(mimeType1.getDescription());
+      assertEquals("application", mimeType1.getPrimaryType());
+      assertFalse(mimeType1.hasMagic());
+      assertEquals("application/octet-stream", mimeType1.getName());
+      assertEquals("octet-stream", mimeType1.getSubType());
+      assertNotNull(mimeType1);
+      assertEquals(7, byteArray0.length);
+      assertSame(mimeType1, mimeType0);
+  }
+
+  @Test(timeout = 4000)
+  public void test26()  throws Throwable  {
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertNull(mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertNotNull(mimeType0);
+      
+      Magic magic0 = new Magic();
+      assertNotNull(magic0);
+      
+      mimeType0.addMagic(magic0);
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertNull(mimeType0.getDescription());
+      assertTrue(mimeType0.hasMagic());
+      
+      Magic magic1 = new Magic(5);
+      assertFalse(magic1.equals((Object)magic0));
+      assertNotNull(magic1);
+      
+      mimeType0.addMagic(magic1);
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertNull(mimeType0.getDescription());
+      assertTrue(mimeType0.hasMagic());
+      assertFalse(magic1.equals((Object)magic0));
+      assertNotSame(magic1, magic0);
+  }
+
+  @Test(timeout = 4000)
+  public void test27()  throws Throwable  {
+      SimpleLog simpleLog0 = new SimpleLog("cak2S");
+      assertFalse(simpleLog0.isDebugEnabled());
+      assertTrue(simpleLog0.isFatalEnabled());
+      assertTrue(simpleLog0.isInfoEnabled());
+      assertTrue(simpleLog0.isErrorEnabled());
+      assertFalse(simpleLog0.isTraceEnabled());
+      assertTrue(simpleLog0.isWarnEnabled());
+      assertEquals(3, simpleLog0.getLevel());
+      assertNotNull(simpleLog0);
+      assertEquals(1, SimpleLog.LOG_LEVEL_TRACE);
+      assertEquals(3, SimpleLog.LOG_LEVEL_INFO);
+      assertEquals(0, SimpleLog.LOG_LEVEL_ALL);
+      assertEquals(4, SimpleLog.LOG_LEVEL_WARN);
+      assertEquals(2, SimpleLog.LOG_LEVEL_DEBUG);
+      assertEquals(7, SimpleLog.LOG_LEVEL_OFF);
+      assertEquals(6, SimpleLog.LOG_LEVEL_FATAL);
+      assertEquals(5, SimpleLog.LOG_LEVEL_ERROR);
+      
+      MimeTypes mimeTypes0 = new MimeTypes("nC<.'EJI", simpleLog0);
+      assertFalse(simpleLog0.isDebugEnabled());
+      assertTrue(simpleLog0.isFatalEnabled());
+      assertTrue(simpleLog0.isInfoEnabled());
+      assertTrue(simpleLog0.isErrorEnabled());
+      assertFalse(simpleLog0.isTraceEnabled());
+      assertTrue(simpleLog0.isWarnEnabled());
+      assertEquals(3, simpleLog0.getLevel());
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      assertEquals(1, SimpleLog.LOG_LEVEL_TRACE);
+      assertEquals(3, SimpleLog.LOG_LEVEL_INFO);
+      assertEquals(0, SimpleLog.LOG_LEVEL_ALL);
+      assertEquals(4, SimpleLog.LOG_LEVEL_WARN);
+      assertEquals(2, SimpleLog.LOG_LEVEL_DEBUG);
+      assertEquals(7, SimpleLog.LOG_LEVEL_OFF);
+      assertEquals(6, SimpleLog.LOG_LEVEL_FATAL);
+      assertEquals(5, SimpleLog.LOG_LEVEL_ERROR);
+      
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertFalse(mimeType0.hasMagic());
+      assertNull(mimeType0.getDescription());
+      assertNotNull(mimeType0);
+      
+      Magic magic0 = new Magic(2608);
+      assertNotNull(magic0);
+      
+      mimeType0.addMagic(magic0);
+      assertTrue(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertNull(mimeType0.getDescription());
+      
+      mimeTypes0.add(mimeType0);
+      assertFalse(simpleLog0.isDebugEnabled());
+      assertTrue(simpleLog0.isFatalEnabled());
+      assertTrue(simpleLog0.isInfoEnabled());
+      assertTrue(simpleLog0.isErrorEnabled());
+      assertFalse(simpleLog0.isTraceEnabled());
+      assertTrue(simpleLog0.isWarnEnabled());
+      assertEquals(3, simpleLog0.getLevel());
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertTrue(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertNull(mimeType0.getDescription());
+      assertEquals(1, SimpleLog.LOG_LEVEL_TRACE);
+      assertEquals(3, SimpleLog.LOG_LEVEL_INFO);
+      assertEquals(0, SimpleLog.LOG_LEVEL_ALL);
+      assertEquals(4, SimpleLog.LOG_LEVEL_WARN);
+      assertEquals(2, SimpleLog.LOG_LEVEL_DEBUG);
+      assertEquals(7, SimpleLog.LOG_LEVEL_OFF);
+      assertEquals(6, SimpleLog.LOG_LEVEL_FATAL);
+      assertEquals(5, SimpleLog.LOG_LEVEL_ERROR);
+      
+      // Undeclared exception!
+      try { 
+        mimeTypes0.add(mimeType0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.Magic", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test28()  throws Throwable  {
+      DOMElement dOMElement0 = new DOMElement("Dnq:!2", (Namespace) null);
+      assertEquals((short)1, dOMElement0.getNodeType());
+      assertFalse(dOMElement0.hasChildNodes());
+      assertTrue(dOMElement0.supportsParent());
+      assertEquals("", dOMElement0.getPrefix());
+      assertNull(dOMElement0.getNodeValue());
+      assertEquals("Element", dOMElement0.getNodeTypeName());
+      assertEquals("Dnq:!2", dOMElement0.getLocalName());
+      assertFalse(dOMElement0.isReadOnly());
+      assertEquals(0, dOMElement0.attributeCount());
+      assertEquals(0, dOMElement0.nodeCount());
+      assertEquals("", dOMElement0.getNamespaceURI());
+      assertNotNull(dOMElement0);
+      
+      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
+      assertEquals((short)1, dOMElement0.getNodeType());
+      assertFalse(dOMElement0.hasChildNodes());
+      assertTrue(dOMElement0.supportsParent());
+      assertEquals("", dOMElement0.getPrefix());
+      assertNull(dOMElement0.getNodeValue());
+      assertEquals("Element", dOMElement0.getNodeTypeName());
+      assertEquals("Dnq:!2", dOMElement0.getLocalName());
+      assertFalse(dOMElement0.isReadOnly());
+      assertEquals(0, dOMElement0.attributeCount());
+      assertEquals(0, dOMElement0.nodeCount());
+      assertEquals("", dOMElement0.getNamespaceURI());
+      assertFalse(dOMDocument0.supportsParent());
+      assertEquals("Document", dOMDocument0.getNodeTypeName());
+      assertEquals("#document", dOMDocument0.getNodeName());
+      assertFalse(dOMDocument0.isReadOnly());
+      assertEquals((short)9, dOMDocument0.getNodeType());
+      assertNull(dOMDocument0.getXMLEncoding());
+      assertNull(dOMDocument0.getName());
+      assertNull(dOMDocument0.getNodeValue());
+      assertNotNull(dOMDocument0);
+      
+      NoOpLog noOpLog0 = new NoOpLog("Dnq:!2");
+      assertFalse(noOpLog0.isFatalEnabled());
+      assertFalse(noOpLog0.isTraceEnabled());
+      assertFalse(noOpLog0.isInfoEnabled());
+      assertFalse(noOpLog0.isWarnEnabled());
+      assertFalse(noOpLog0.isDebugEnabled());
+      assertFalse(noOpLog0.isErrorEnabled());
+      assertNotNull(noOpLog0);
+      
+      MimeTypes mimeTypes0 = new MimeTypes(dOMDocument0, noOpLog0);
+      assertEquals((short)1, dOMElement0.getNodeType());
+      assertFalse(dOMElement0.hasChildNodes());
+      assertTrue(dOMElement0.supportsParent());
+      assertEquals("", dOMElement0.getPrefix());
+      assertNull(dOMElement0.getNodeValue());
+      assertEquals("Element", dOMElement0.getNodeTypeName());
+      assertEquals("Dnq:!2", dOMElement0.getLocalName());
+      assertFalse(dOMElement0.isReadOnly());
+      assertEquals(0, dOMElement0.attributeCount());
+      assertEquals(0, dOMElement0.nodeCount());
+      assertEquals("", dOMElement0.getNamespaceURI());
+      assertFalse(dOMDocument0.supportsParent());
+      assertEquals("Document", dOMDocument0.getNodeTypeName());
+      assertEquals("#document", dOMDocument0.getNodeName());
+      assertFalse(dOMDocument0.isReadOnly());
+      assertEquals((short)9, dOMDocument0.getNodeType());
+      assertNull(dOMDocument0.getXMLEncoding());
+      assertNull(dOMDocument0.getName());
+      assertNull(dOMDocument0.getNodeValue());
+      assertFalse(noOpLog0.isFatalEnabled());
+      assertFalse(noOpLog0.isTraceEnabled());
+      assertFalse(noOpLog0.isInfoEnabled());
+      assertFalse(noOpLog0.isWarnEnabled());
+      assertFalse(noOpLog0.isDebugEnabled());
+      assertFalse(noOpLog0.isErrorEnabled());
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      int int0 = mimeTypes0.getMinLength();
+      assertEquals((short)1, dOMElement0.getNodeType());
+      assertFalse(dOMElement0.hasChildNodes());
+      assertTrue(dOMElement0.supportsParent());
+      assertEquals("", dOMElement0.getPrefix());
+      assertNull(dOMElement0.getNodeValue());
+      assertEquals("Element", dOMElement0.getNodeTypeName());
+      assertEquals("Dnq:!2", dOMElement0.getLocalName());
+      assertFalse(dOMElement0.isReadOnly());
+      assertEquals(0, dOMElement0.attributeCount());
+      assertEquals(0, dOMElement0.nodeCount());
+      assertEquals("", dOMElement0.getNamespaceURI());
+      assertFalse(dOMDocument0.supportsParent());
+      assertEquals("Document", dOMDocument0.getNodeTypeName());
+      assertEquals("#document", dOMDocument0.getNodeName());
+      assertFalse(dOMDocument0.isReadOnly());
+      assertEquals((short)9, dOMDocument0.getNodeType());
+      assertNull(dOMDocument0.getXMLEncoding());
+      assertNull(dOMDocument0.getName());
+      assertNull(dOMDocument0.getNodeValue());
+      assertFalse(noOpLog0.isFatalEnabled());
+      assertFalse(noOpLog0.isTraceEnabled());
+      assertFalse(noOpLog0.isInfoEnabled());
+      assertFalse(noOpLog0.isWarnEnabled());
+      assertFalse(noOpLog0.isDebugEnabled());
+      assertFalse(noOpLog0.isErrorEnabled());
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals(1024, int0);
+  }
+
+  @Test(timeout = 4000)
+  public void test29()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("Ulu KU)f7Vy");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      assertNull(mimeType0.getDescription());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      assertNotNull(mimeType0);
+      
+      mimeType0.addRootXML("application/octet-stream", "cak2S");
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      assertNull(mimeType0.getDescription());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      
+      mimeTypes0.add(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      assertNull(mimeType0.getDescription());
+      assertEquals("octet-stream", mimeType0.getSubType());
+      
+      mimeTypes0.add(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application", mimeType0.getPrimaryType());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      assertNull(mimeType0.getDescription());
+      assertEquals("octet-stream", mimeType0.getSubType());
+  }
+}
